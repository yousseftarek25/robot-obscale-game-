#Import modules
from roboticstoolbox import Bicycle, RandomPath, VehicleIcon, RangeBearingSensor,LandmarkMap
from math import pi, atan2
import matplotlib.pyplot as plt
import numpy as np
import sympy

#made an object (vehicle)
anim = VehicleIcon('robot1.png', scale = 4)
#user chooses the starting position of robot
Xcoord = int(input("Enter the X coordinate for the robot's starting position: "))
Ycoord = int(input("Enter the Y coordinate for the robot's starting position: "))
start=initialPosition=[Xcoord, Ycoord]
#setting the area of map and taking control of vehicle and setting starting position
veh = Bicycle(
    animation = anim,
    control = RandomPath,
    dim = 20,
    x0=(initialPosition[0],initialPosition[1],0),
)
#map goal and plot opstacle
veh.init(plot=True)
obs = int(input("Choose the number of obstacles: "))
map = LandmarkMap(obs, 20)
Xtarget = int(input("Please enter starting X coordinate to reach the goal: "))
Ytarget = int(input("Please enter starting Y coordinate to reach the goal: "))
goal = [Xtarget, Ytarget]
#desgin and mark the goal marker
goal_marker_style = {
    'marker': 'E',
    'markersize': 8,
    'color': 'b',
}
plt.plot(goal[0], goal[1], **goal_marker_style)
map.plot()
#range bearing sensor was added
sensor=RangeBearingSensor(robot=veh,map=map, animate=True)
for i in sensor.h(veh.x):
    dis_land = i[0]
    ang_land = i[1]

# placing goal inside array
goal_array=[goal]
goal_array.append(goal)
goal_array.insert(0,initialPosition)
x_array=[item[0] for item in goal_array]
y_array=[item[1] for item in goal_array]

opi = pi/4
#loop that makes robot to move freely if certain condions are not changed while not hitting any obstacle
run=True
target=[goal_array]
while(run): #stoping of while loop when target is reached
    for i in sensor.h(veh.x):
        if (i[0] > 0.5) and (abs(i[1]) > opi):
            veh.step(1,steer)
            steer = goal_heading-veh.x[2]
            plt.pause(0.05)
        else:
            veh.step(-1,0) 
            plt.pause(0.05)
        veh._animation.update(veh.x) # keeps updating vehicle animation as it moves
#plot vehicle and target 
plt.plot(goal[0], goal[1], **goal_marker_style)
